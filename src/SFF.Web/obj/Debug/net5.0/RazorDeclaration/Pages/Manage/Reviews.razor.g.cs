// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SFF.Web.Pages.Manage
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using SFF.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using SFF.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\_Imports.razor"
using MudBlazor.ThemeManager;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
using SFF.Core.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
using SFF.Core.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Reviews")]
    public partial class Reviews : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 121 "c:\Users\rifri\OneDrive\Dokument\Program plugg\sff-RikardF\src\SFF.Web\Pages\Manage\Reviews.razor"
       
    private IEnumerable<Review> _reviews = new List<Review>();
    private IEnumerable<Movie> _movies = new List<Movie>();
    private List<Movie> _moviesToReview = new List<Movie>();
    private IEnumerable<Association> _association = new List<Association>();
    private List<Review> _newReview = new List<Review>();
    private IReviewService _reviewService;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/reviewHub"))
            .Build();
        hubConnection.On("LaddaAldrigOmTack", async () =>
        {
            using var context = DbFactory.CreateDbContext();
            _reviews = await context.Reviews.Include(m => m.Movie).Include(a => a.Association).ToListAsync();
            await InvokeAsync(() => StateHasChanged());
        });
        await hubConnection.StartAsync();
        _reviewService = reviewService;
        using var context = DbFactory.CreateDbContext();
        _reviews = await context.Reviews.Include(m => m.Movie).Include(a => a.Association).ToListAsync();
        _association = await context.Associations.ToListAsync();
        _newReview.Clear();
        _newReview.Add(new Review());

    }

    private async Task DeleteFromDb(Review review)
    {
        using var context = DbFactory.CreateDbContext();
        context.Reviews.Remove(review);
        await context.SaveChangesAsync();
        await Send();
        await OnInitializedAsync();
    }

    private async Task AddToDb(Review review)
    {
        using var context = DbFactory.CreateDbContext();
        context.Reviews.Add(review);
        await context.SaveChangesAsync();
        await Send();
        await OnInitializedAsync();
    }

    private async Task GetMoviesByAssociation(int associationId)
    {
        using var context = DbFactory.CreateDbContext();
        _movies = await context.Lendings.Where(a => a.AssociationId == associationId).Select(m => m.Movie).ToListAsync();
        foreach (var movie in _movies)
        {
            if (!_reviewService.DoReviewExist(context, movie.Id, associationId))
            {
                _moviesToReview.Add(movie);
            }
        }
    }

    Task Send() =>
        hubConnection.SendAsync("Send");

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReviewService reviewService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDbContextFactory<SFFDbContext> DbFactory { get; set; }
    }
}
#pragma warning restore 1591
